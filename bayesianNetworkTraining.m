function [valError,cons,fileName] = bayesianNetworkTraining(optVars, numClasses, train, val)

    disp(optVars)
    
        imageSize = [48, 48, 1];
        nFilters = 8.*2.^optVars.NetworkDepth;
        blockSize = 2*ones(optVars.Length, 1);
        if blockSize > 2
            blockSize(3:end) = 3;
        end
        
        layers = makeParameterisedNet(imageSize, ...
                                        numClasses, ...
                                        nFilters, ...
                                        optVars.DropOutFactor, ...
                                        blockSize);
        
        options = trainingOptions('adam',...
            'InitialLearnRate',optVars.InitialLearnRate,...
            'MaxEpochs',60, ...
            'LearnRateSchedule','piecewise',...
            'LearnRateDropPeriod',30,...
            'LearnRateDropFactor',0.1,...
            'MiniBatchSize',128,...
            'L2Regularization',optVars.L2Regularization,...
            'Shuffle','every-epoch',...
            'Verbose',false,...
            'Plots','training-progress',...
            'ValidationData', val,...
            'ValidationPatience',Inf);
        
        trainedNet = trainNetwork(train, layers, options);
        close(findall(groot,'Tag','NNET_CNN_TRAININGPLOT_FIGURE'))
        YPredicted = classify(trainedNet, val);
        valError = 1 - mean(YPredicted == val.Labels);
        fileName = num2str(valError) + ".mat";
        save(fileName,'trainedNet','valError','options')
        cons = [];
        
end
