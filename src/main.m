function net = main
    rng('default');
    imageSize = [48, 48, 1];

    [train, val, ~] = getDataStores();
    
    augmenter = imageDataAugmenter('RandRotation', [-20, 20], ...
                                     'RandXTranslation', [-4, 4], ...
                                     'RandYTranslation', [-4, 4], ...
                                     'RandXReflection', true, ...
                                     'RandXShear', [-3, 3], ...
                                     'RandXScale', [0.95, 1.05], ...
                                     'RandYScale', [0.95, 1.05]);

    augmentedTrain = augmentedImageDatastore(imageSize, train, ...
                                                'DataAugmentation', augmenter);

    nFilters = 64;
    blockSize = 2*ones(4, 1);
    dropOutFactor = 0.25;
    initialLearnRate = 0.00022;
    l2Regularization = 4e-09;
    
    layers = makeParameterisedNet(imageSize, ...
                                    numel(unique(train.Labels)), ...
                                    nFilters, ...
                                    dropOutFactor, ...
                                    blockSize);
    
    options = trainingOptions('adam', ...
                                'InitialLearnRate', initialLearnRate,...
                                'MaxEpochs', 60, ...
                                'LearnRateSchedule', 'piecewise',...
                                'LearnRateDropPeriod', 30,...
                                'LearnRateDropFactor', 0.1,...
                                'MiniBatchSize', 128,...
                                'L2Regularization', l2Regularization,...
                                'Shuffle', 'every-epoch',...
                                'Verbose', true,...
                                'ValidationData', val,...
                                'ValidationPatience', Inf);

    net = trainNetwork(augmentedTrain, layers, options);
end
